{"version":3,"sources":["HeaderRow.js","Loading.js","DataRows.js","App.js","index.js"],"names":["HeaderRow","Loading","Spinner","animation","role","className","DataRows","dataRecords","map","record","i","key","text","type","App","props","state","loading","filteredCfsData","allCfsData","load20RandomFacts","bind","loadAllFacts","handleSearchSubmit","this","setState","fetchData","then","fetchedData","all","newRandomArray","sampleSize","event","preventDefault","filterValue","target","elements","formSearchValue","value","filteredData","filter","rec","toLowerCase","includes","url","fetch","method","mode","headers","res","status","Error","json","catch","error","console","message","as","size","aria-hidden","Navbar","bg","expand","Brand","href","Nav","Link","Button","variant","disabled","onClick","renderIcon","Form","inline","onSubmit","e","Group","controlId","FormControl","placeholder","Table","striped","hover","length","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dd23aec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst HeaderRow = () => (\r\n  <thead>\r\n    <tr>\r\n      <th>Text:</th>\r\n      <th>Type:</th>\r\n    </tr>\r\n  </thead>\r\n);\r\n\r\nexport default HeaderRow;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loading = () => (\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n        Loading ...\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n);\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nconst DataRows = ({ dataRecords }) => (\r\n  <tbody>\r\n    {dataRecords == null\r\n      ? \"No Records Found!\"\r\n      : dataRecords.map((record, i) => {\r\n          return (\r\n            <tr key={i}>\r\n              <td>{record.text}</td>\r\n              <td>{record.type}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n  </tbody>\r\n);\r\n\r\nexport default DataRows;\r\n","import React from \"react\";\r\nimport HeaderRow from \"./HeaderRow\";\r\nimport Loading from \"./Loading\";\r\nimport DataRows from \"./DataRows\";\r\nimport {\r\n  Spinner,\r\n  Button,\r\n  Table,\r\n  Navbar,\r\n  Nav,\r\n  Form,\r\n  FormControl\r\n} from \"react-bootstrap\";\r\nimport { sampleSize } from \"lodash\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false,\r\n      filteredCfsData: [],\r\n      allCfsData: []\r\n    };\r\n\r\n    this.load20RandomFacts = this.load20RandomFacts.bind(this);\r\n    this.loadAllFacts = this.loadAllFacts.bind(this);\r\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\r\n  }\r\n\r\n  // Will load all the data facts from the API\r\n  loadAllFacts() {\r\n    this.setState({ loading: true });\r\n\r\n    this.fetchData(\"https://cat-fact.herokuapp.com/facts?animal_type=cat\")\r\n      .then(fetchedData =>\r\n        this.setState({ allCfsData: fetchedData.all, loading: false })\r\n      )\r\n      .then(this.load20RandomFacts);\r\n  }\r\n\r\n  // Will load only 20 random data facts from the API\r\n  load20RandomFacts() {\r\n    this.setState({ loading: true });\r\n\r\n    // Using Lodash SampleSize method to get 20 random items\r\n    let newRandomArray = sampleSize(this.state.allCfsData, 20);\r\n\r\n    this.setState({ filteredCfsData: newRandomArray, loading: false });\r\n  }\r\n\r\n  // Initial Component Mounting method\r\n  componentDidMount() {\r\n    this.loadAllFacts();\r\n  }\r\n\r\n  // Handles Search Submit request\r\n  handleSearchSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n\r\n    let filterValue = event.target.elements.formSearchValue.value;\r\n\r\n    // Filter out all the previously fetched data\r\n    let filteredData = this.state.allCfsData.filter(function(rec) {\r\n      return rec.text.toLowerCase().includes(filterValue.toLowerCase());\r\n    });\r\n    this.setState({\r\n      filteredCfsData: filteredData,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  fetchData(url) {\r\n    // URL site that doesnâ€™t send Access-Control-*\r\n    // To workaround CORS issue when calling from localhost, we use proxy server to capture the data\r\n    // found at: https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9\r\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n    return fetch(proxyUrl + url, {\r\n      method: \"GET\",\r\n      mode: \"cors\",\r\n      headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n    })\r\n      .then(res => {\r\n        if (res.status >= 400) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .catch(error => {\r\n        console.error(\"ERROR: Failed to get data from API : \" + error.message);\r\n      });\r\n  }\r\n\r\n  renderIcon() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      );\r\n    }\r\n    return \"Random load 20 more facts\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand href=\"#home\">CFS Data</Navbar.Brand>\r\n\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline-success\"\r\n                disabled={this.state.loading}\r\n                onClick={this.load20RandomFacts}\r\n              >\r\n                {this.renderIcon()}\r\n              </Button>\r\n            </Nav.Link>\r\n            <Form inline onSubmit={e => this.handleSearchSubmit(e)}>\r\n              <Form.Group controlId=\"formSearchValue\">\r\n                <FormControl\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  className=\"mr-sm-2\"\r\n                />\r\n                <Button size=\"sm\" variant=\"outline-success\" type=\"submit\">\r\n                  Search\r\n                </Button>\r\n              </Form.Group>\r\n            </Form>\r\n          </Nav>\r\n        </Navbar>\r\n\r\n        <Table striped hover size=\"sm\">\r\n          <HeaderRow />\r\n          {this.state.loading ? (\r\n            <Loading />\r\n          ) : (\r\n            <DataRows dataRecords={this.state.filteredCfsData} />\r\n          )}\r\n        </Table>\r\n        <mark>\r\n          Data loaded with {this.state.filteredCfsData.length} of filtered and{\" \"}\r\n          {this.state.allCfsData.length} all records\r\n        </mark>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}